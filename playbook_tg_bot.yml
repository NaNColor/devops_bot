- name: Deploy PostgreSQL master server
  hosts: primary_db_server
  tasks:
    - name: Include group variables
      include_vars:
        file: .env
    - name: Install packages
      become: yes
      package:
        name: "{{ item }}"
        state: present
      loop:
        - python3-psycopg2
        - postgresql-15
        - postgresql-contrib
        - libpq-dev
        - tree
        - rsyslog
        - build-essential
        - python3


    - name: Add Python 3 to PATH
      become: yes
      lineinfile:
        dest: /etc/environment
        line: "PATH=$PATH:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games"
        insertafter: EOF
        state: present

    - name: Install PostgreSQL
      become: yes
      package:
        name: postgresql-15
        state: present

    - name: Ensure PostgreSQL service is running
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Set password for PostgreSQL user 'postgres'
      become: yes
      become_user: postgres
      shell: "psql -c \"ALTER USER postgres WITH PASSWORD 'Qq12345';\""

    - name: Check if database exists
      command: "psql -U postgres -lqt | cut -d \\| -f 1 | grep -qw \"pt_db\""
      ignore_errors: true
      register: db_check_result
      failed_when: false

    - name: Create PostgreSQL database if not exists
      become: yes
      become_user: postgres
      command: "createdb -U postgres pt_db"
      when: db_check_result.rc != 0
      failed_when: false


    - name: Create replication user 'repl_user' with password 'Qq12345'
      become: yes
      become_user: postgres
      command: "psql -c \"CREATE USER repl_user REPLICATION LOGIN ENCRYPTED PASSWORD 'Qq12345';\""
      args:
        creates: "/var/lib/pgsql/.pgpass"
      ignore_errors: yes

    - name: Create databases
      become: yes
      become_user: postgres
      command: "psql -c \"CREATE TABLE public.emails (id SERIAL PRIMARY KEY, email VARCHAR(100) NOT NULL);\nCREATE TABLE public.phones (id SERIAL PRIMARY KEY, phone VARCHAR(50) NOT NULL);\""
      ignore_errors: yes

    - name: Ensure directory /oracle/pg_data/archive/ exists
      become: yes
      file:
        path: /oracle/pg_data/archive/
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    - name: Modify PostgreSQL configuration file
      blockinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = 5432
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          logging_collector = 'on'
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
      become: yes
      become_user: postgres

    - name: Configure pg_hba.conf for replication (trust)
      lineinfile:
        path: "/etc/postgresql/15/main/pg_hba.conf"
        insertafter: EOF
        line: "{{ item }}"
      loop:
        - "host all postgres {{ DB_HOST }}/32 scram-sha-256"
        - "host replication repl_user {{ DB_REPL_HOST }}/32 trust"
      become: yes
      become_user: postgres

    - name: Reload PostgreSQL service to apply changes
      service:
        name: postgresql
        state: reloaded
      environment:
        POSTGRES_PASSWORD: "{{ DB_PASSWORD }}"
      become: yes

    - name: Change permissions for postgresql-15-main.log
      become: yes
      file:
        path: /var/log/postgresql/postgresql-15-main.log
        mode: '0664'

- name: Configure PostgreSQL slave server
  become: yes
  hosts: slave_server
  tasks:
    - name: Include group variables
      include_vars:
        file: .env
    - name: Install PostgreSQL and PostgreSQL-contrib packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - postgresql
        - postgresql-contrib

    - name: Install python3-pexpect package
      package:
        name: python3-pexpect
        state: present

    - name: Modify PostgreSQL configuration file
      blockinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        block: |
          listen_addresses = 'localhost, {{ DB_REPL_HOST }}'
      become_user: postgres

    - name: Stop PostgreSQL service
      systemd:
        name: postgresql
        state: stopped

    - name: Remove files from main directory
      file:
        path: /var/lib/postgresql/15/main
        state: absent
      become_user: postgres

    - name: Run pg_basebackup
      command: "pg_basebackup -R -h {{ DB_HOST }} -U repl_user -D /var/lib/postgresql/15/main -P"
      become_user: postgres

    - name: Start PostgreSQL service
      systemd:
        name: postgresql
        state: started


- name: Setting up a Telegram bot
  hosts: bot_server
  gather_facts: no
  tasks:
    - name: Include group variables
      include_vars:
        file: .env
    - name: Install packages
      become: yes
      package:
        name: "{{ item }}"
        state: present
      loop:
        - sshpass
        - python3-pip
        - python3-psycopg2
        - rsyslog
        - python3-dev
        - build-essential
        - python3
    - name: create dir
      become: yes
      shell: "mkdir -p /usr/bot && chmod -R 777 /usr/bot"
      
    - name: copy bot.py
      become: yes
      copy:
        src: "bot.py"
        dest: "/usr/bot/bot.py"

    - name: copy requirements.txt
      become: yes
      copy:
        src: "requirements.txt"
        dest: "/usr/bot/requirements.txt"
        
    - name: install python dependencies
      become: yes
      pip:
        requirements: "/usr/bot/requirements.txt"
        
    - name: start bot
      become: yes
      command: "python3 /usr/bot/bot.py"
      environment:
        DB_HOST: "{{ DB_HOST }}"
        DB_PORT: "{{ DB_PORT }}"
        RM_PASSWORD: "{{ RM_PASSWORD }}"
        RM_HOST: "{{ RM_HOST }}"
        DB_HOST: "{{ DB_HOST }}"
        DB_PORT: "{{ DB_PORT }}"
        DB_USER: "{{ DB_USER }}"
        DB_PASSWORD: "{{ DB_PASSWORD }}"
        DB_DATABASE: "{{ DB_DATABASE }}"
        TOKEN: "{{ TOKEN }}"
